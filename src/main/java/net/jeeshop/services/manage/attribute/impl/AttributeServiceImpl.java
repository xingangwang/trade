package net.jeeshop.services.manage.attribute.impl;import javax.annotation.Resource;import net.jeeshop.core.ServersManager;import net.jeeshop.dao.page.PagerModel;import net.jeeshop.services.manage.attribute.AttributeService;import net.jeeshop.services.manage.attribute.bean.Attribute;import net.jeeshop.services.manage.attribute.dao.AttributeDao;import net.jeeshop.services.manage.attribute_link.dao.Attribute_linkDao;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;@Service("attributeServiceManage")public class AttributeServiceImpl extends ServersManager<Attribute, AttributeDao> implements		AttributeService {	private static final Logger logger = LoggerFactory.getLogger(AttributeServiceImpl.class);	    @Resource(name = "attribute_linkDaoManage")	private Attribute_linkDao attribute_linkDao;    @Override    @Resource(name = "attributeDaoManage")    public void setDao(AttributeDao attributeDao) {        this.dao = attributeDao;    }	public void setAttribute_linkDao(Attribute_linkDao attribute_linkDao) {		this.attribute_linkDao = attribute_linkDao;	}	@Override	public PagerModel selectPageList(Attribute attr){		PagerModel model = super.selectPageList(attr);		for (Object obj : model.getList()) {			Attribute _attr = (Attribute)obj;			Attribute example = new Attribute();			example.setPid(Integer.valueOf(_attr.getId()));			_attr.setAttrList(super.selectList(example));		}		return model;	}			/**	 * 插入父属性和批量的子属性集合	 */	public int insert(Attribute e) {		logger.error("AttributeServiceImpl.insert...");				int id = 0;//父属性/参数ID		if(StringUtils.isNotBlank(e.getId())){			id = Integer.valueOf(e.getId());			//更新主属性			dao.update(e);			//删除已经插入的子属性的数据			dao.deleteByPid(id);		}else{			//插入父属性			id = dao.insert(e);		}				for (Attribute attr : e.getAttrList()) {			attr.setPid(id);			dao.insert(attr);		}						logger.error("AttributeServiceImpl.insert.id,return."+id);		return id;	}			/**	 * 需哟重写父类的此方法	 * 批量删除	 * 	 * 删除商品属性数据，需要同时删除该属性下的子属性 以及 attribute_link表的关联数据	 * 	 * 无论你删除的是商品属性还是商品参数，此方法都会根据选择的ID集合区删除所有的数据，主要包括：主属性表的数据、该主属性下的所有子属性、属性关联表的数据	 * .并且是事物控制的删除。	 * @param ids	 * @return	 */	public int deletes(String[] ids) {		if (ids != null && ids.length > 0) {			for (int i = 0; i < ids.length; i++) {				logger.error("deleteAllById.id="+ids[i]);				if(StringUtils.isBlank(ids[i])){					throw new NullPointerException();				}				int id = Integer.parseInt(ids[i]);								//删除attribute_link表的相关联的数据				attribute_linkDao.deleteByAttributeId(id);								//根据PID删除选择属性下 的所有子属性				dao.deleteByPid(id);								//根据ID删除选择的属性				dao.deleteById(id);								//由于mybatis不支持同一个statment下执行多个SQL语句，所以只能写多个方法先解决，以后发现有好的方法了再改进。//				dao.deleteAllById(id);			}		}		return 0;	}	@Override	public int selectCount(Attribute ee) {		return dao.selectCount(ee);	}}