package net.jeeshop.services.front.order.impl;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;import javax.annotation.Resource;import net.jeeshop.core.ServersManager;import net.jeeshop.core.constant.OrderStatus;import net.jeeshop.core.framework.front.SystemManager;import net.jeeshop.core.pay.PayTypeEnum;import net.jeeshop.core.util.SessionUtil;import net.jeeshop.core.util.StringUtil;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.address.bean.Address;import net.jeeshop.services.front.area.bean.Area;import net.jeeshop.services.front.cart.impl.CartServiceImpl;import net.jeeshop.services.front.express.bean.Express;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.order.bean.OrderSimpleReport;import net.jeeshop.services.front.order.dao.OrderDao;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.orderdetail.dao.OrderdetailDao;import net.jeeshop.services.front.orderlog.bean.Orderlog;import net.jeeshop.services.front.orderlog.dao.OrderlogDao;import net.jeeshop.services.front.orderpay.OrderpayService;import net.jeeshop.services.front.orderpay.bean.Orderpay;import net.jeeshop.services.front.orderpay.dao.OrderpayDao;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.front.ordership.dao.OrdershipDao;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.front.product.dao.ProductDao;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class OrderServiceImpl extends ServersManager<Order, OrderDao> implements		OrderService {	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);	    @Autowired    @Override    public void setDao(OrderDao orderDao) {        this.dao = orderDao;    }    @Autowired	private OrderdetailDao orderdetailDao;    @Autowired	private OrderpayDao orderpayDao;    @Autowired	private OrdershipDao ordershipDao;    @Autowired	private OrderlogDao orderlogDao;    @Autowired	private ProductDao productDao;    @Autowired	private AccountService accountService;    @Resource	private AddressService addressService;	@Resource	private CartServiceImpl cartServiceImpl;	@Autowired	private OrderpayService orderpayService;	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public void setProductDao(ProductDao productDao) {		this.productDao = productDao;	}	public void setOrderpayDao(OrderpayDao orderpayDao) {		this.orderpayDao = orderpayDao;	}	public void setOrderlogDao(OrderlogDao orderlogDao) {		this.orderlogDao = orderlogDao;	}	public void setOrdershipDao(OrdershipDao ordershipDao) {		this.ordershipDao = ordershipDao;	}	public void setOrderdetailDao(OrderdetailDao orderdetailDao) {		this.orderdetailDao = orderdetailDao;	}	public boolean createOrder(Order order, String buyer_from) throws Exception {		List<Orderdetail> orderdetailList = order.getOrderdetail();			//检测商品是否都有库存,如果没有库存需要提醒用户        Map<String, ProductStockInfo> productStockMap = SystemManager.getInstance().getProductStockMap();		for (Orderdetail detal : orderdetailList) {			ProductStockInfo product = productStockMap.get(String.valueOf(detal.getProductID()));            if(product==null || product.getStock() < detal.getNumber()){				return false;			}		}				//如果检查没有出现库存不足的情况，则进行砍库存操作		for (Orderdetail item : orderdetailList) {			ProductStockInfo stockInfo = productStockMap.get(String.valueOf(item.getProductID()));			stockInfo.setStock(stockInfo.getStock() - item.getNumber());			stockInfo.setChangeStock(true);			productStockMap.put(String.valueOf(item.getProductID()),stockInfo);			productDao.updateStockAfterPaySuccess(item.getNumber(), item.getProductID());		}				//创建订单对象		order.setAccount(getLoginUser().getAccount());		order.setRebate(1);		order.setStatus(OrderStatus.INIT.name());		order.setPaystatus(Order.order_paystatus_n);		order.setGuaranteePay(false);//TODO:如果是担保交易应设置为ture		order.setOrderdetail(orderdetailList);		order.calculataAmount();				Express express;		if (StringUtil.toBoolean(order.getIsVirtual())) {			express = SystemManager.getInstance().getExpressMap().get("POST");			order.setExpressCode(express.getCode());//配送方式编码			order.setExpressName(express.getName());//配送方式名称			order.setFee("0");//订单配送费		} else {			//获取配送方式			express = SystemManager.getInstance().getExpressMap().get(order.getExpressCode());			if(express==null){				throw new NullPointerException("没有编码为"+order.getExpressCode()+"的配送方式！本次请求视为非法！");			}			order.setExpressCode(express.getCode());//配送方式编码			order.setExpressName(express.getName());//配送方式名称			order.setFee(String.valueOf(express.getFee()));//订单配送费		}		//		order.setScore(score);		order.setAmount(String.valueOf(Double.valueOf(order.getPtotal())+Double.valueOf(order.getFee())));//订单总金额 = 内存订单总金额 + 总配送费//		order.setAmountExchangeScore(order.getTotalExchangeScore());//订单总兑换积分。订单支付成功以后扣除				/**		 * 对金额进行格式化，防止出现double型数字计算造成的益出。		 */		DecimalFormat df = new DecimalFormat("0.00");		order.setAmount(df.format(Double.valueOf(order.getAmount())));//订单总金额		order.setPtotal(df.format(Double.valueOf(order.getPtotal())));//订单商品总金额		order.setFee(df.format(Double.valueOf(order.getFee())));//订单总配送费		//创建订单		int orderID = dao.insert(order);		order.setId(String.valueOf(orderID));		//创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(order.getId());		orderpay.setPaystatus(Orderpay.orderpay_paystatus_n);		orderpay.setPayamount(Double.valueOf(order.getAmount()));		orderpay.setPaymethod(PayTypeEnum.ALIPAY_DIRECT.name());		int payId = orderpayService.insert(orderpay);					/**		 * 配送地址信息		 */		Ordership ordership = new Ordership();		ordership.setOrderid(order.getId());				if (!StringUtil.toBoolean(order.getIsVirtual())) {			Address address = addressService.selectById(order.getSelectAddressID());			if(address==null){				throw new NullPointerException("根据ID="+order.getSelectAddressID()+"查询不到配送地址信息！本次请求视为非法！");			}			Area area = SystemManager.getInstance().getAreaMap().get(address.getProvince());//获取省份对象			String proinceName = area.getName();//省份名称			String cityName = null;//城市名称			String areaName = null;			List<Area> citys = area.getChildren();			if(citys!=null && citys.size()>0){				for(int i=0;i<citys.size();i++){					Area cityItem = citys.get(i);					if(cityItem.getCode().equals(address.getCity())){						cityName = cityItem.getName();												//获取所在区域名称						if(StringUtils.isNotBlank(address.getArea())){							List<Area> areaList = cityItem.getChildren();							if(areaList!=null && areaList.size()>0){								for(int m=0;m<areaList.size();m++){									areaName = areaList.get(m).getName();								}							}						}					}				}			}			ordership.setShipname(address.getName());			ordership.setShipaddress(proinceName+cityName+address.getAddress());			ordership.setProvinceCode(address.getProvince());			ordership.setProvince(proinceName);			ordership.setCityCode(address.getCity());			ordership.setCity(cityName);			ordership.setAreaCode(address.getArea());			ordership.setArea(areaName);			ordership.setPhone(address.getMobile());			ordership.setTel(address.getPhone());			ordership.setZip(address.getZip());			ordership.setSex("1");		} else {			ordership = null;		}		order.setOrdership(ordership);		//如果订单来自于购物车，移除购物车明细		if ("cart".equals(buyer_from)) {			ArrayList<String> ids = new ArrayList<String>();			for (Orderdetail orderdetail : orderdetailList) {				ids.add(orderdetail.getCartItemId());			}			cartServiceImpl.deleteItem(ids.toArray(new String[ids.size()]));		}				//创建订单项		for (int i = 0; i < orderdetailList.size(); i++) {			Orderdetail orderdetail = orderdetailList.get(i);			orderdetail.setOrderID(orderID);			orderdetailDao.insert(orderdetail);		}		if (null != ordership) {			//记录配送信息			ordership.setOrderid(String.valueOf(orderID));			ordershipDao.insert(ordership);		}		//记录订单创建日志		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(String.valueOf(orderID));		orderlog.setAccount(order.getAccount());		orderlog.setContent("【创建订单】用户创建订单。订单总金额："+order.getAmount());		orderlog.setAccountType(Orderlog.orderlog_accountType_w);		orderlogDao.insert(orderlog);				//计算所需扣除积分		Account account = new Account();		account.setAccount(order.getAccount());		account.setAddScore(0-order.getScore());		accountService.updateScore(account);		return true;	}	@Override	public List<Order> selectOrderInfo(Order order) {		return dao.selectOrderInfo(order);	}		/*	 * <p>Title: updateStatus</p>	 * <p>Description: </p>	 * @param order	 * @return	 * @see net.jeeshop.services.front.order.OrderService#updateStatus(net.jeeshop.services.front.order.bean.Order)	 */	@Override	public boolean updateStatus(Order order) {		return doUpdateStatus(order, SessionUtil.getUser().getNickname(), Orderlog.orderlog_accountType_w);	}	/**	 * doUpdateStatus(这里用一句话描述这个方法的作用)	 *	 * @Title: doUpdateStatus	 * @Description: 	 * @param order	 * @param updaterType 	 * @param updater 	 * @return boolean    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月31日 上午11:31:41	 * 	 */	private boolean doUpdateStatus(Order order, String updater, String updaterType) {		String orderStatus = order.getStatus();		String orderid = order.getId();		String trade_no = order.getTradeNo();				Orderpay orderPayExp = new Orderpay();		orderPayExp.setOrderid(orderid);		orderPayExp.setPaymethod(PayTypeEnum.ALIPAY_DIRECT.name());		Orderpay orderpay = orderpayDao.selectOne(orderPayExp);//TODO:后续需改造为通过支付记录号直接查询到支付记录，支付记录号来源通知参数				String content = null;				String refund_status = order.getRefundStatus();		if(StringUtils.isNotBlank(refund_status )){			/**			 * 退款流程			 */			if(refund_status.equals("WAIT_SELLER_AGREE")){//等待卖家同意退款	==>卖家需处理				content = "【支付宝异步通知-->退款流程】等待卖家同意退款(WAIT_SELLER_AGREE)。";			}else if(refund_status.equals("WAIT_BUYER_RETURN_GOODS")){//卖家同意退款，等待买家退货	==>通知买家退货，此 可以发站内信、短信、或邮件 通知对方				content = "【支付宝异步通知-->退款流程】退款协议达成，等待买家退货(WAIT_BUYER_RETURN_GOODS)。";			}else if(refund_status.equals("WAIT_SELLER_CONFIRM_GOODS")){//买家已退货，等待卖家收到退货	==>支付宝会通知卖家				content = "【支付宝异步通知-->退款流程】等待卖家收货(WAIT_SELLER_CONFIRM_GOODS)。";			}else if(refund_status.equals("REFUND_SUCCESS")){//卖家收到退货，退款成功，交易关闭	==>卖家登录支付宝，确认OK。				content = "【支付宝异步通知-->退款流程】退款成功(REFUND_SUCCESS)。";			}else if(refund_status.equals("REFUND_CLOSED")){//卖家收到退货，退款成功，交易关闭	==>卖家登录支付宝，确认OK。				content = "【支付宝异步通知-->退款流程】退款关闭(REFUND_CLOSED)。";			}else if(refund_status.equals("SELLER_REFUSE_BUYER")){//卖家收到退货，退款成功，交易关闭	==>卖家登录支付宝，确认OK。				content = "【支付宝异步通知-->退款流程】卖家不同意协议，等待买家修改(SELLER_REFUSE_BUYER)。";			}else{				content = "【支付宝异步通知-->退款流程】未知。refund_status = " + refund_status;			}			updateRefundStatus(orderid, refund_status);		}		else {			/**			 * 交易流程			 */			if(orderStatus.equals(OrderStatus.PASSED.name())){//等待买家付款				Orderpay pay = new Orderpay();				pay.setId(orderpay.getId());				pay.setTradeNo(trade_no);				pay.setPaystatus(Orderpay.orderpay_paystatus_n);				orderpayDao.update(pay);			}else if(orderStatus.equals(OrderStatus.PAID.name())){//已付款，等待卖家发货				if(orderpay.getPaystatus().equals(Orderpay.orderpay_paystatus_y)){					return true;				}				//更新支付记录为【成功支付】				Orderpay orderpay2 = new Orderpay();				orderpay2.setId(orderpay.getId());				orderpay2.setTradeNo(trade_no);				orderpay2.setPaystatus(Orderpay.orderpay_paystatus_y);				orderpayDao.update(orderpay2);				order.setPaystatus(Order.order_paystatus_y);			}			dao.update(order);			content = orderStatus;		}				insertOrderlog(orderid, content, updater, updaterType);		return true;	}			@Override	public boolean updateStatusByNotify(OrderStatus orderStatus,String refund_status,String out_trade_no,String trade_no, String notifyer) {		logger.error("trade_status = " + orderStatus  + ",refund_status = " + refund_status + ",out_trade_no = " + out_trade_no + ",trade_no = " + trade_no);		Order order = new Order();		order.setId(out_trade_no);		order.setStatus(orderStatus.name());		order.setTradeNo(trade_no);		order.setRefundStatus(refund_status);		return doUpdateStatus(order, notifyer, Orderlog.orderlog_accountType_p);	}		/**	 * 插入订单操作日志	 * @param orderid	订单ID	 * @param content	日志内容	 * @param updaterType 	 */	private void insertOrderlog(String orderid, String content, String updater, String updaterType) {		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(orderid);		orderlog.setAccount(updater);		orderlog.setContent(content);		orderlog.setAccountType(updaterType);		orderlogDao.insert(orderlog);	}		/**	 * 更新订单的退款状态	 * @param orderid	订单ID	 * @param refundStatus	退款状态	 */	private void updateRefundStatus(String orderid,String refundStatus){		Order order = new Order();		order.setId(orderid);		order.setRefundStatus(refundStatus);		dao.update(order);	}		@Override	public OrderSimpleReport selectOrdersSimpleReport(String account) {		return dao.selectOrdersSimpleReport(account);	}		@Override	public Order selectById(String orderId){		Order order = dao.selectById(orderId);		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(order.getId());		orderpay.setPaystatus("y");		order.setOrderpay(orderpayDao.selectOne(orderpay));		Ordership oshipExp = new Ordership();		oshipExp.setOrderid(orderId);		order.setOrdership(ordershipDao.selectOne(oshipExp));		return order;	}}