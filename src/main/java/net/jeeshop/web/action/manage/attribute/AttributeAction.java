package net.jeeshop.web.action.manage.attribute;import javax.servlet.http.HttpServletRequest;import net.jeeshop.dao.page.PagerModel;import net.jeeshop.services.manage.attribute.AttributeService;import net.jeeshop.services.manage.attribute.bean.Attribute;import net.jeeshop.web.action.BaseController;import net.jeeshop.web.common.bean.JQValidatorResultBean;import net.jeeshop.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;/** * 属性action * @author huangf * @author dylan * */@Controller@RequestMapping("/manage/attribute/")public class AttributeAction extends BaseController<Attribute> {		private static final Logger logger = LoggerFactory.getLogger(AttributeAction.class);		@Autowired	private AttributeService attributeService;	private static final Object lock = new Object();//添加参数锁，防止多人操作产生的数据异常。	private static final String page_toList = "/manage/attribute/attributeList";	private static final String page_toEdit = "/manage/attribute/attributeEdit";	private static final String page_toAdd = "/manage/attribute/attributeEdit";	private AttributeAction() {		super.page_toList = page_toList;		super.page_toAdd = page_toAdd;		super.page_toEdit = page_toEdit;	}	@Override	public AttributeService getService() {		return attributeService;	}		@Override	public String deletes(HttpServletRequest request, String[] ids, @ModelAttribute("e") Attribute e, RedirectAttributes flushAttrs) throws Exception {		super.deletes(request, ids, e, flushAttrs);        return "redirect:selectList?pid="+e.getPid();    }	@Override	protected void selectListAfter(PagerModel pager, Attribute e) {		super.selectListAfter(pager, e);		RequestHolder.getRequest().setAttribute("catalogs", systemManager.getCatalogs());	}	public void setAttributeService(AttributeService attributeService) {		this.attributeService = attributeService;	}		/**	 * 保留下pid，因为这个表示属性和参数2个方面	 */	@Override	public String toAdd(Attribute e, ModelMap model) throws Exception {		model.addAttribute("insertOrUpdateMsg", "");		model.addAttribute("catalogs", systemManager.getCatalogs());		model.addAttribute("e", e);		return page_toAdd;	}		@Override	public String back(Attribute e, ModelMap model) throws Exception {		return super.back(e, model);	}	@Override	public String selectList(HttpServletRequest request, @ModelAttribute("e") Attribute e) throws Exception {		int pid = e.getPid();		String init = request.getParameter("init");		if("y".equals(init)){			e.clear();		}		e.setPid(pid);		e.setParamName("pid");		e.setParamValue(String.valueOf(e.getPid()));		return super.selectList(request, e);	}		/**	 * validateUniqueCatalog(这里用一句话描述这个方法的作用)	 *	 * @Title: validateUniqueCatalog	 * @Description: 	 * @param attr	 * @return Object    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月7日 下午9:17:06	 * 	 */	@RequestMapping("uniqueCatalog")	@ResponseBody	public Object validateUniqueCatalog(Attribute attr){		logger.info(String.valueOf(attr.getCatalogID()));		boolean result = false;		int count = attributeService.selectCount(attr);		if (count == 0) {			result = true;		}else if(count == 1 && StringUtils.isNotBlank(attr.getId())){			result = true;		}		return new JQValidatorResultBean(result, result ? null : "该商品类别下已经存在商品参数！");	}		/**	 * 对属性和参数的新增操作需要注意一下：同一个类别下面可以有多个属性，同一个属性下只能有一个参数。同一个属性下的所有商品将会共享这一二个参数。	 * 	 * 这个可以参看淘宝的做法，如果查看笔记本，那么该笔记本类别下可以有多个品牌，一个品牌下有多个属性。但是	 * 	 * 淘宝商品结构：	 * 	 * 商品服务分类		--顶级目录	 * 		手机数码		--顶级虚目录	 * 			笔记本	--二级虚目录	 * 				联想、三星、惠普、索尼		--商品属性(或者称之为品牌)分类	 * 					联想属性(品牌)下有：X240/S3/T430/T400		--品牌下的型号分类	 * 					 */	@Override	public String insert(HttpServletRequest request, Attribute e, RedirectAttributes flushAttrs) throws Exception {		try {			int pid = e.getPid();			logger.error("Attribute.insert.id = " + e.getId()+",pid="+pid);			if(pid==-1){svn://git.oschina.net/dinguangx/jshop				synchronized (lock) {					//查询指定的类目下是否有多个参数					Attribute ee = new Attribute();					ee.setCatalogID(e.getCatalogID());					ee.setPid(e.getPid());					int count = attributeService.selectCount(ee);					if (count == 0) {						return insert0(e, request, flushAttrs);					}else if(count == 1){						if(StringUtils.isNotBlank(e.getId())){							return insert0(e, request, flushAttrs);						}					}					//已经添加了一个参数，则会抛出RuntimeException异常。					throw new RuntimeException("一个商品类别下只能添加一个参数！");				}			}else if(pid==0){				//忽略				return insert0(e, request, flushAttrs);			}else{				throw new NullPointerException("参数异常。pid="+pid+"，pid不正确。只能为0或-1。");			}		} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}	}		private String insert0(Attribute e, HttpServletRequest request, RedirectAttributes flushAttrs) throws Exception{		super.insert(request, e, flushAttrs);		return "redirect:toEdit2?id="+e.getId();	}		/**	 * 列表页面点击 编辑商品	 */	@Override	public String toEdit(@ModelAttribute("e") Attribute e, ModelMap model) throws Exception {//		getSession().setAttribute("insertOrUpdateMsg", "");		model.addAttribute("catalogs", systemManager.getCatalogs());		return toEdit0(e, model);	}		/**	 * 添加或编辑商品后程序回转编辑页面	 * @return	 * @throws Exception	 */	@RequestMapping("toEdit2")	public String toEdit2(Attribute e, ModelMap model) throws Exception {		return toEdit0(e, model);	}		private String toEdit0(Attribute e, ModelMap model) throws Exception {		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}		logger.error("e.getId() = " + e.getId());		model.addAttribute("catalogs", systemManager.getCatalogs());		//加载属性/参数对象		e = attributeService.selectById(e.getId());		logger.error("e = " + e);		//加载子属性列表		Attribute ee = new Attribute();		ee.setPid(Integer.valueOf(e.getId()));		e.setAttrList(attributeService.selectList(ee));		model.addAttribute("e", e);		return page_toEdit;	}}