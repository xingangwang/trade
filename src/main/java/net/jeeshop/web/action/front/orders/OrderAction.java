package net.jeeshop.web.action.front.orders;import java.io.IOException;import java.math.BigDecimal;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.kuaidi100Helper;import net.jeeshop.core.constant.OrderStatus;import net.jeeshop.core.framework.front.SystemManager;import net.jeeshop.core.pay.PayType;import net.jeeshop.core.pay.PayTypeEnum;import net.jeeshop.core.util.MathUtil;import net.jeeshop.core.util.SessionUtil;import net.jeeshop.core.util.StringUtil;import net.jeeshop.dao.page.PagerModel;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.address.bean.Address;import net.jeeshop.services.front.cart.impl.CartServiceImpl;import net.jeeshop.services.front.comment.CommentService;import net.jeeshop.services.front.comment.bean.Comment;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.orderdetail.OrderdetailService;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.orderpay.OrderpayService;import net.jeeshop.services.front.orderpay.bean.Orderpay;import net.jeeshop.services.front.ordership.OrdershipService;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.web.action.front.FrontBaseController;import net.jeeshop.web.common.bean.ObjectResult;import net.jeeshop.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;/** * 门户订单服务类 *  * @author Administrator *  */@Controller("frontOrderAction")@RequestMapping("order")public class OrderAction extends FrontBaseController<Order> {	/**	 * @Fields logger : 	 */	private static final Logger logger = LoggerFactory.getLogger(OrderAction.class);	@Autowired	private OrderService orderService;	@Autowired	private OrderdetailService orderdetailService;	@Autowired	private OrderpayService orderpayService;	@Autowired	private ProductService productService;	@Autowired	private CommentService commentService;	@Autowired   	private OrdershipService ordershipService;	@Autowired	private AddressService addressService;	@Resource	private CartServiceImpl cartServiceImpl;		/**	 * confirmReceiveProduct(确认收货)	 *	 * @Title: confirmReceiveProduct	 * @Description: 	 * @param orderId	 * @return Object    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月30日 下午7:04:45	 * 	 */	@RequestMapping("confirmReceiveProduct")	@ResponseBody	public Object confirmReceiveProduct(@RequestParam("id") String orderId) {		Order order = new Order();		order.setId(orderId);		order.setStatus(OrderStatus.SIGNED.name());		Boolean success = orderService.updateStatus(order);		return new ObjectResult(success, success ? "确认收货成功！" : "确认收货操作失败，请联系客服！", "交易完成");	}		/**	 * buyNow (立刻购买后形成订单)	 * (这里描述这个方法的执行流程 – 跳转到确认订单页面)	 *	 * @Title: buy	 * @Description: 	 * @param order	 * @return String    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月14日 上午9:41:24	 * 	 */	@RequestMapping("buyNow")	public String buy(String productId, int quantity, String specId, 			String isVirtual, @ModelAttribute("order") Order order, ModelMap model){				if (getLoginUser() == null) {			return page_toLogin;		}				Product product = productService.selectById(productId);		Orderdetail orderDetail = new Orderdetail(); 		orderDetail.setProduct(product);		orderDetail.setNumber(quantity);		orderDetail.setPrice(product.getNowPrice());		orderDetail.setTotal0(MathUtil.multiply(Double.valueOf(orderDetail.getProduct().getNowPrice()), quantity).toString());		orderDetail.setProductID(Integer.valueOf(productId));		orderDetail.setScore(MathUtil.multiply(new BigDecimal(product.getScore()),new BigDecimal(quantity)).intValue());		List<Orderdetail> orderdetails = new ArrayList<Orderdetail>();		orderdetails.add(orderDetail);		order.setOrderdetail(orderdetails);		order.setIsVirtual(isVirtual);		order.calculataAmount();		//order.getFee TODO: 以后会给一个默认的物流方式以获取到物流费用		order.setAmount(order.getPtotal());		if (!StringUtil.toBoolean(isVirtual)) {			Address add = new Address();			Account acc = getLoginUser();			add.setAccount(acc.getAccount());			List<Address> addressList = addressService.selectList(add);			model.addAttribute("addresses", addressList);			if(addressList!=null && addressList.size()>0){				for(int i=0;i<addressList.size();i++){					Address addItem = addressList.get(i);					if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){						model.addAttribute("defaultAddessID", addItem.getId());						break;					}				}			}			model.addAttribute("expressList", SystemManager.getInstance().getExpressMap().values());		}		return "confirmOrder";	}	/**	 * 处理购物车结算请求	 * @return	 */	@RequestMapping("confirmOrder")	public String confirmOrder(@ModelAttribute("order")Order order, ModelMap model){		Account acc =getLoginUser();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return page_toLoginRedirect;		}				//获取最新商品信息		for (Orderdetail orderItem : order.getOrderdetail()) {			Product prod = productService.selectById(String.valueOf(orderItem.getProductID()));			orderItem.setProduct(prod);			orderItem.setPrice(prod.getNowPrice());			orderItem.setScore(prod.getScore());			orderItem.setTotal0(MathUtil.multiply(prod.getNowPrice(), String.valueOf(orderItem.getNumber())).toString());			orderItem.setScore(MathUtil.multiply(new BigDecimal(prod.getScore()),new BigDecimal(orderItem.getNumber())).intValue());		}		order.calculataAmount();		if (!StringUtil.toBoolean(order.getIsVirtual())) {			//加载配送信息			Address add = new Address();			add.setAccount(acc.getAccount());			List<Address> addressList = addressService.selectList(add);			model.addAttribute("addresses", addressList);			if(addressList!=null && addressList.size()>0){				for(int i=0;i<addressList.size();i++){					Address addItem = addressList.get(i);					if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){						model.addAttribute("defaultAddessID", addItem.getId());						break;					}				}			}			model.addAttribute("expressList", SystemManager.getInstance().getExpressMap().values());		}		model.addAttribute("buyer_from", "cart");		return "confirmOrder";	}		/**	 * pay (创建订单并发起支付请求)	 *	 * @Title: pay	 * @Description: 	 * @param order	 * @param cartItemIndexes	 * @param detail	 * @param buyer_from	 * @param payType	 * @param model	 * @return	 * @throws Exception String    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月28日 上午11:14:56	 * 	 */	@RequestMapping(value = "createOrderAndPay", method = RequestMethod.POST)	public String pay(Order order, String buyer_from, 			@RequestParam(defaultValue = "ALIPAY_DIRECT") PayTypeEnum payTypeEnum, ModelMap model) throws Exception{		logger.debug("--------------进入创建订单-------------------");		Account account = getLoginUser();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return page_toLoginRedirect;		}				boolean success = orderService.createOrder(order, buyer_from);		//库存不足，则刷最后支付页面，提示用户某些商品的库存不足，请重新选购		if(!success){			logger.error("某些商品库存不足！请重新选购！");			return "redirect:/order/confirmOrder.html";		}						PayInfo payInfo = createPayInfo(order);		PayType payTyper = payTypeEnum.getInstance(); 		model.addAttribute("requestHTML", payTyper.getRequestHtml(payInfo));		model.addAttribute("title", payTyper.getName());		model.addAttribute("tips", payTyper.getTips());				return "order/do_pay_request";	}		/**	 * 点击我的订单页面的未付款的订单进行付款操作,则跳转到付款页面进行付款	 * @return	 * @throws Exception 	 */	@RequestMapping("toPay")	public String toPay(Orderpay payRecord, Model model) throws Exception{		if (getLoginUser() == null) {			return page_toLogin;		}		String orderid = RequestHolder.getRequest().getParameter("id");		Order order = orderService.selectById(orderid);		Ordership ordership = ordershipService.selectOne(new Ordership(orderid));		order.setOrdership(ordership);				Orderdetail orderdetailExp = new Orderdetail();		orderdetailExp.setOrderID(Integer.valueOf(orderid));		List<Orderdetail> orderdetail = orderdetailService.selectList(orderdetailExp );		order.setOrderdetail(orderdetail);		//创建支付记录对象		payRecord.setOrderid(orderid);		payRecord.setPaystatus(Orderpay.orderpay_paystatus_n);		payRecord.setPayamount(Double.valueOf(order.getAmount()));		payRecord.setPaymethod(PayTypeEnum.ALIPAY_DIRECT.name());//TODO:以后需动态获取支付方式,payRecord.get...		orderpayService.insert(payRecord);				PayTypeEnum payType = PayTypeEnum.ALIPAY_DIRECT;//TODO:默认支付方式，以后需改进为用户指定的支付方式		PayType payer = payType.getInstance();				PayInfo payInfo = createPayInfo(order);		model.addAttribute("requestHTML", payer.getRequestHtml(payInfo));		model.addAttribute("title", payer.getName());		model.addAttribute("tips", payer.getTips());				return "order/do_pay_request";	}		/**	 * getOrderDetails(这里用一句话描述这个方法的作用)	 *	 * @Title: getOrderDetails	 * @Description: 	 * @param buyer_from	 * @param cartItemIndexes	 * @param detail	 * @return List<Orderdetail>    返回类型	 * @throws	 * @author JeremyWang	 * @date 2015年7月15日 下午10:58:04	 * 	 */	private List<Orderdetail> getOrderDetails(String buyer_from,			Integer[] cartItemIndexes, Orderdetail detail) {		List<Orderdetail> orderdetailList = new LinkedList<Orderdetail>();		if ("cart".equals(buyer_from)) {			CartInfo cartInfo = getMyCart();			for (Integer index : cartItemIndexes) {				CartItem cartItem = cartInfo.getItems().get(index);				Product product = cartItem.getProduct();				//				ProductStockInfo momeryProduct = SystemManager.productStockMap.get(product.getId());//				if(StringUtils.isNotBlank(momeryProduct.getActivityID())){//					Activity activity = SystemManager.activityMap.get(momeryProduct.getActivityID());//					String discountType = activity.getDiscountType();//					if(discountType.equals(Activity.activity_discountType_r)){//						////						double finalPrice = Double.valueOf(product.getNowPrice()) - Double.valueOf(activity.getDiscount());//						//					}else if(discountType.equals(Activity.activity_discountType_d)){//						//					}//				}								Orderdetail orderdetail = new Orderdetail();				orderdetail.setProduct(product);				orderdetail.setProductID(Integer.valueOf(product.getId()));				orderdetail.setGiftID(product.getGiftID());//商品赠品ID				orderdetail.setPrice(product.getNowPrice());//商品现价				orderdetail.setNumber(cartItem.getQuantity());//购买数				orderdetail.setFee("0");//配送费				orderdetail.setProductName(product.getName());				orderdetail.setTotal0(String.valueOf(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计				orderdetail.setScore(product.getScore());//活的赠送的积分				if(product.getBuySpecInfo()!=null){					//按照规格计算					orderdetail.setSpecInfo("尺寸:"+product.getBuySpecInfo().getSpecSize()+",颜色:"+product.getBuySpecInfo().getSpecColor());//					ptotal+= Double.valueOf(product.getBuySpecInfo().getSpecPrice()) * product.getBuyCount();//					score+= product.getScore();				}else{				}//				ptotal+= Double.valueOf(product.getNowPrice()) * product.getBuyCount();				orderdetailList.add(orderdetail);			}		} else {			detail.setProduct(productService.selectById(detail.getProduct().getId()));			detail.setProductID(Integer.valueOf(detail.getProduct().getId()));			detail.setProductName(detail.getProduct().getName());			detail.setPrice(detail.getProduct().getNowPrice());			orderdetailList.add(detail);		}		return orderdetailList;	}	/**	 * 创建支付宝的付款信息对象	 * @param order	 */	private PayInfo createPayInfo(Order order) {		Ordership ordership = order.getOrdership();		PayInfo payInfo = new PayInfo();		//TODO: 默认卖家账号为zhifubao@taxhoo.net,待后续多商户改造时再根据商家获取其账号		payInfo.setWIDseller_email("zhifubao@taxhoo.net");		payInfo.setWIDout_trade_no(order.getId());		if (order.getOrderdetail().size() > 1) {			payInfo.setWIDsubject("合并" + order.getOrderdetail().size() + "个商品");		} else {			payInfo.setWIDsubject(order.getOrderdetail().get(0).getProductName());		}		payInfo.setWIDprice(Double.valueOf(order.getPtotal()));		payInfo.setWIDbody(order.getRemark());		payInfo.setShow_url(SystemManager.getInstance().getSystemSetting().getWww()+"/order/"+order.getId());				if (null == ordership) {			payInfo.setWIDreceive_name(getLoginUser().getNickname());			payInfo.setWIDreceive_address("虚拟商品");			payInfo.setWIDreceive_zip(getLoginUser().getPostcode());			payInfo.setWIDreceive_phone(getLoginUser().getTel());			payInfo.setWIDreceive_mobile(getLoginUser().getTel());		} else {			payInfo.setWIDreceive_name(ordership.getShipname());			payInfo.setWIDreceive_address(ordership.getShipaddress());			payInfo.setWIDreceive_zip(ordership.getZip());			payInfo.setWIDreceive_phone(ordership.getPhone());			payInfo.setWIDreceive_mobile(ordership.getTel());		}		payInfo.setLogistics_fee(Double.valueOf(order.getFee()));		payInfo.setLogistics_type(order.getExpressCode());				return payInfo;	}		/**	 * 查询我的订单列表信息	 */	@RequestMapping("selectList")	public String selectList(HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		int offset = 0;//分页偏移量		if (request.getParameter("pager.offset") != null) {			offset = Integer					.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;		e.setOffset(offset);		PagerModel pager = getService().selectPageList(e);		if (pager == null) {			pager = new PagerModel();		}		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		pager.setPagerUrl("myCarts");		model.addAttribute("pager", pager);		return "/account/orders";	}	/**	 * 删除我的订单信息	 */	@RequestMapping("deletes")	public String deletes(String[] ids, HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		getService().deletes(ids);		return selectList(request, e, model);	}		/**	 * 查看订单详情	 * @return	 */	@RequestMapping("{orderId}")	public String orderDetail(@PathVariable("orderId") String id, ModelMap model){		Account acc = getLoginUser();		if (acc == null) {			return page_toLogin;		}				if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}				//查询订单信息		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(id));		List<Orderdetail> orderdetailList = orderdetailService.selectList(orderdetail);		if(orderdetailList==null || orderdetailList.size()==0){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}		logger.error("orderdetail.size="+orderdetailList.size());		Order e = new Order();		e.setOrderdetail(orderdetailList);				//查询订单配送信息		Ordership ordership = new Ordership();		ordership.setOrderid(id);		ordership = ordershipService.selectOne(ordership);		e.setOrdership(ordership);				//查询订单物流信息		e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		model.addAttribute("e", e);		return "/account/orderInfo";	}																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												/**	 * 查看物流信息	 * @return	 */	@RequestMapping("orderhipInfo")	public String orderhipInfo(){		logger.debug("orderhipInfo...");		return "/account/orderhipInfo";	}	/**	 * 用户进行评论提交	 * @return	 * @throws Exception 	 */	@RequestMapping(value = "doRate", method = RequestMethod.POST)	public String doRate() throws Exception{		Account acc = getLoginUser();		if (acc == null) {			return page_toLogin;		}		logger.error("doRate...");				int orderid = Integer.valueOf(RequestHolder.getRequest().getParameter("orderid").toString());		Order order = orderService.selectById(String.valueOf(orderid));		if (StringUtils.isNotBlank(order.getClosedComment())				&& order.getClosedComment().equals(Order.order_closedComment_y)) {			//订单的点评功能已被关闭。			throw new RuntimeException(FrontContainer.request_illegal_error);		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(orderid);		List<Orderdetail> list = orderdetailService.selectList(orderdetail);		List<Comment> comments = new LinkedList<Comment>();		for(int i=0;i<list.size();i++){			Orderdetail item = list.get(i);			//获取页面上填写的评论类容			String content = RequestHolder.getRequest().getParameter("product_"+item.getProductID());			if(StringUtils.isBlank(content)){				continue;			}			Comment c = new Comment();			c.setProductID(String.valueOf(item.getProductID()));			c.setOrderdetailID(item.getId());			c.setOrderID(String.valueOf(orderid));			c.setContent(content);			c.setStatus(Comment.comment_status_y);			c.setNickname(acc.getNickname());			c.setStar(5);			c.setAccount(acc.getAccount());			comments.add(c);		}		commentService.insertList(comments);		return ("redirect:rateSuccess");	}	@RequestMapping("rateSuccess")	public String rateSuccess(){		logger.error("rateSuccess...");		return "/rateSuccess";	}		/**	 * 支付成功后进行评价,转到评论页面	 * @return	 * @throws Exception 	 */	@RequestMapping("rate")	public String rate(@ModelAttribute("e")Order e, ModelMap model) throws Exception{		Account acc = getLoginUser();		if (acc == null) {			return page_toLogin;		}//		String productID = getRequest().getParameter("productID");		String orderid = RequestHolder.getRequest().getParameter("orderid");		if(StringUtils.isBlank(orderid)){			throw new NullPointerException("参数异常！");		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(orderid));		orderdetail.setIsComment(Orderdetail.orderdetail_isComment_n);		e.setRateOrderdetailList(orderdetailService.selectList(orderdetail));		e.setId(orderid);		if(e.getRateOrderdetailList()!=null && e.getRateOrderdetailList().size()==0){			e.setRateOrderdetailList(null);		}				//加载商品信息//		product = productService.selectById(productID);//		//加载以往用户的评价信息//		comment.clear();//		comment.setAccount(acc.getAccount());//		comment.setProductID(Integer.valueOf(productID));//		comment.setOrderID(Integer.valueOf(orderid));//		comment = commentService.selectOne(comment);//		if(comment==null){//			logger.error("还没有评价");//		}else{//			logger.error("已经评价过了");//		}				//加载指定商品的评论列表//		Comment commentParam = new Comment();//		commentParam.setProductID(Integer.valueOf(productID));//		selectCommentList(commentParam);		model.addAttribute("e", e);		return "/rate";	}		/**	 * 分页加载评论	 * @return	 * @throws Exception	 */	private PagerModel selectCommentList(Comment commentParam) throws Exception {		HttpServletRequest request = RequestHolder.getRequest();		int offset = 0;		if (request.getParameter("pager.offset") != null) {			offset = Integer					.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;//		Comment comment = new Comment();		((PagerModel) commentParam).setOffset(offset);		PagerModel pager = commentService.selectPageList(commentParam);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("rate");		return pager;	}		/**	 * 支付成功后，回调请求跳转到的页面	 * @return	 */	@RequestMapping("paySuccess")	public String paySuccess(){		logger.debug("paySuccess...");		return "paySuccess";	}		/**	 * 当商品支付需要积分时调用	 * 	 * @return	 * @throws IOException	 */	@RequestMapping("checkScore")	@ResponseBody	public Object checkScore(int score, ModelMap model)			throws IOException {		if (getLoginUser() == null) {			return new ObjectResult(false, "亲，您需要登录以后才能立即购买哦！");		}		if(SessionUtil.getloginUserScore() < score){			return new ObjectResult(false, "您当前的积分不够支付该商品所需积分！");		}		return new ObjectResult(true);	}		@Override	public OrderService getService() {		return orderService;	}	public void setOrderService(OrderService orderService) {		this.orderService = orderService;	}}