package net.jeeshop.web.action.front.cart;import java.io.IOException;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import javax.annotation.Resource;import net.jeeshop.core.Services;import net.jeeshop.core.framework.front.SystemManager;import net.jeeshop.core.model.CartItem;import net.jeeshop.core.util.SessionUtil;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.cart.CartService;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.manage.activity.bean.Activity;import net.jeeshop.services.manage.spec.SpecService;import net.jeeshop.web.action.front.FrontBaseController;import net.jeeshop.web.action.front.orders.CartInfo;import net.jeeshop.web.common.bean.ObjectResult;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.alibaba.fastjson.JSON;/** * 购物车 *  * @author huangf *  */@Controller("frontCartAction")@RequestMapping("cart")public class CartAction extends FrontBaseController<CartInfo> {	private static final Logger logger = LoggerFactory.getLogger(CartAction.class);	@Resource	private CartService cartService;	@Autowired	private ProductService productService;	@Autowired	private AddressService addressService;	@Autowired	private SpecService specService;	@Override	public Services<CartInfo> getService() {		return null;	}	/**	 * 查看购物车	 * 	 * @return	 */	@RequestMapping("cart")	public String cart(ModelMap model) {		if (getLoginUser() == null) {			return page_toLoginRedirect;		}		model.addAttribute("cart", SessionUtil.getCart());		return "cart";	}	/**	 * 从购物车中删除指定的产品	 * 	 * @return	 */	@RequestMapping(value = "delete", method = RequestMethod.POST)	public String delete(ModelMap model, String id) {		if (getLoginUser() == null) {			return page_toLoginRedirect;		}		cartService.deleteItem(new String[] { id });		return "redirect:/cart/cart.html";	}	DecimalFormat df = new DecimalFormat("0.00");	/**	 * 加入购物车，不对金额进行任何的运算。金额的运算在方法CartAction.notifyCart	 * 	 * @return	 * @throws IOException	 */	@RequestMapping("addToCart")	@ResponseBody	public Object addToCart(String productID, int buyCount, String buySpecID, ModelMap model)			throws IOException {		if (getLoginUser() == null) {			return new ObjectResult(false, "亲，您需要登录以后才能将该商品加入购物车哦！");		}		CartItem item = new CartItem();		Product sku = productService.selectById(productID);		item.setSku(sku);		item.setSkuId(productID);		item.setAddPrice(new BigDecimal(sku.getNowPrice()));		item.setQuantity(buyCount);		cartService.addCartItem(item);		return new ObjectResult(true);	}	/**	 * 通知购物车+-商品，然后计算出总金额返回。	 * 	 * @return	 * @throws IOException	 */	@RequestMapping(value = "notifyCart", method = RequestMethod.POST)	@ResponseBody	public Object notifyCart(CartItem cartItem, ModelMap model) throws IOException {		ObjectResult jsonResult = new ObjectResult();		Map<String, Object> resultData = new HashMap<String, Object>();		jsonResult.setdata(resultData);		/**		 * 检查购买的商品是否超出库存数		 */		ProductStockInfo stockInfo = SystemManager.getInstance().getProductStockMap()				.get(cartItem.getSkuId());		if (stockInfo == null) {			// 商品已卖完或已下架，请联系站点管理员!			logger.error("商品已卖完或已下架，请联系站点管理员或从购物车中删除!");			jsonResult.setSuccess(false);			jsonResult.setMessage("商品已卖完或已下架，请联系站点管理员或从购物车中删除!");			return jsonResult;		} else if (stockInfo.getStock() < cartItem.getQuantity()) {			int max;			if (StringUtils.isNotBlank(stockInfo.getActivityID())) {				/**				 * 购买的是活动促销的商品，则检查是否超出购买的最大数量				 */				Activity activity = SystemManager.getInstance().getActivityMap()						.get(stockInfo.getActivityID());				if (activity == null || activity.getStatus().equals(Activity.activity_status_n)) {					jsonResult.setSuccess(false);					max = activity.getMaxSellCount();					jsonResult.setMessage("此商品为促销活动的商品，最多只能购买" + max + "件");				} else {					if (activity.getMaxSellCount() <  stockInfo.getStock()) {						jsonResult.setSuccess(false);						max = activity.getMaxSellCount();						jsonResult.setMessage("此商品为促销活动的商品，最多只能购买" + max + "件");					}				}			}						// 购买的商品数超出库存数，则自动当最大库存数计算			cartItem.setQuantity(stockInfo.getStock());			max = stockInfo.getStock();			jsonResult.setSuccess(false);			jsonResult.setMessage("最多只能买" + max + "件");			resultData.put("max", max);		} else {			jsonResult.setSuccess(true);		}		cartItem = cartService.updateItem(cartItem);		resultData.put("amount", cartItem.getAmount().toString());		resultData.put("score", cartItem.getScore().toString());		return jsonResult;	}	/**	 * 正式转到支付之前的最后一次检查库存	 * 此方法也可以用于批量错误消息检查，比如在购物车商品列表页面，提交到支付页面的时候进行批量检查（所有商品是否都有货	 * 、是否存在超卖、是否已下架、是否活动已结束（未在指定时间内进行支付，且活动已结束））	 * 	 * @return	 * @throws IOException	 */	@RequestMapping("checkStockLastTime")	@ResponseBody	public String checkStockLastTime() throws IOException {		logger.error("checkStockLastTime...");		Account acc = getLoginUser();		if (acc == null) {			// throw new NullPointerException("请先登录！");			logger.error("提示用户需要登录...");			return ("-1");// 提示用户需要登录		}		StockErrorProductReturn result = new StockErrorProductReturn();		CartInfo cartInfo = getMyCart();		if (cartInfo == null) {			logger.error("login..");			// session超时，转到登录页面，让用户重新登录下单，上次未支付的单子只能找不到了。			result.code = "login";			return (JSON.toJSONString(result).toString());		}		result.code = "result";		List<StockErrorProduct> list = new LinkedList<CartAction.StockErrorProduct>();		// for (CartItem item : cartInfo.getItems()) {		// Product pro = item.getProduct();		// ProductStockInfo stockInfo =		// SystemManager.getInstance().getProductStockMap().get(pro.getId());		// if(stockInfo!=null){		// if(StringUtils.isNotBlank(stockInfo.getActivityID())){		// /**		// * 购买的是活动促销的商品，则检查是否超出购买的最大数量		// */		// Activity activity =		// SystemManager.getInstance().getActivityMap().get(stockInfo.getActivityID());		// if(activity.getMaxSellCount() != 0 && pro.getBuyCount() >		// activity.getMaxSellCount()){		// String msg0 = "此商品为促销活动的商品，最多只能购买" + activity.getMaxSellCount()+"件";		// list.add(new StockErrorProduct(pro.getId(),msg0));		// }		// //		// // //如果商品为需要积分兑换的，则检查用户账户上的积分是否足够		// // if(false){		// // acc = getLoginAccount();		// // if(acc==null){		// // throw new NullPointerException("请先登录！");		// // }		// //		// // //积分不足的错误提示		// // if(acc.getScore() < activity.getExchangeScore() *		// pro.getBuyCount()){		// // list.add(new		// StockErrorProduct(pro.getId(),"此商品总共所需积分："+activity.getExchangeScore()		// * pro.getBuyCount() + "点，可惜您目前只有"+acc.getScore()+"积分"));		// // }		// // }		// }else{		// if(stockInfo.getStock()<pro.getBuyCount()){		// //购物车中购买的商品超出库存数		// list.add(new		// StockErrorProduct(pro.getId(),"最多只能购买"+stockInfo.getStock()+"个！"));		// }		// }		//		// }else{		// //商品可能已经下架或售完！		// list.add(new StockErrorProduct(pro.getId(),"商品可能已经下架或售完！"));		// }		// }		// 检查积分是否足够支付此订单消耗的积分		// 积分不足的错误提示		if (acc.getScore() < cartInfo.getTotalExchangeScore()) {			result.error = "总共所需积分：" + cartInfo.getTotalExchangeScore() + ",可惜您仅有积分："					+ acc.getScore();		}		if (list != null && list.size() > 0) {			result.list = list;		}		cartInfo.totalCacl();// 计算购物车中商品总金额		return (JSON.toJSONString(result).toString());	}	/**	 * 库存检查返回的错误对象	 * 	 * @author huangf	 * 	 */	class StockErrorProductReturn {		String code;		String error;// 错误消息，显示到提交按钮边上		List<StockErrorProduct> list;		public String getCode() {			return code;		}		public void setCode(String code) {			this.code = code;		}		public List<StockErrorProduct> getList() {			return list;		}		public void setList(List<StockErrorProduct> list) {			this.list = list;		}		public String getError() {			return error;		}		public void setError(String error) {			this.error = error;		}	}	/**	 * 库存检查错误消息对象	 */	class StockErrorProduct {		String id;// 商品ID		String tips;// 错误消息		public StockErrorProduct() {		}		public StockErrorProduct(String id, String tips) {			this.id = id;			this.tips = tips;		}		public String getId() {			return id;		}		public void setId(String id) {			this.id = id;		}		public String getTips() {			return tips;		}		public void setTips(String tips) {			this.tips = tips;		}	}	/**	 * 购物车页面，单个商品返回的信息对象	 */	class CartProductInfo {		String code;// 返回代码		String msg;// 返回消息		String total0;// 小计金额		String amount;// 总计金额		int totalExchangeScore;// 兑换此商品所需总积分		int amountExchangeScore;// 积分汇总		public String getCode() {			return code;		}		public void setCode(String code) {			this.code = code;		}		public String getMsg() {			return msg;		}		public void setMsg(String msg) {			this.msg = msg;		}		public String getTotal0() {			return total0;		}		public void setTotal0(String total0) {			this.total0 = total0;		}		public String getAmount() {			return amount;		}		public void setAmount(String amount) {			this.amount = amount;		}		public int getTotalExchangeScore() {			return totalExchangeScore;		}		public void setTotalExchangeScore(int totalExchangeScore) {			this.totalExchangeScore = totalExchangeScore;		}		public int getAmountExchangeScore() {			return amountExchangeScore;		}		public void setAmountExchangeScore(int amountExchangeScore) {			this.amountExchangeScore = amountExchangeScore;		}	}}